/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Mon Apr 17 22:48:15 PDT 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_3("%b|%b|   %b||%b|%b", 18u);
static std::string const __str_literal_2("-------------", 13u);
static std::string const __str_literal_1("a|b|c_in||c|s", 13u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cnt(simHdl, "cnt", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_started(simHdl, "started", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "cnt", SYM_MODULE, &INST_cnt);
  init_symbol(&symbols[1u], "cnt__h270", SYM_DEF, &DEF_cnt__h270, 4u);
  init_symbol(&symbols[2u], "RL_count", SYM_RULE);
  init_symbol(&symbols[3u], "RL_finish", SYM_RULE);
  init_symbol(&symbols[4u], "RL_print", SYM_RULE);
  init_symbol(&symbols[5u], "RL_start", SYM_RULE);
  init_symbol(&symbols[6u], "started", SYM_MODULE, &INST_started);
}


/* Rule actions */

void MOD_mkTb::RL_start()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  }
  INST_started.METH_write((tUInt8)1u);
}

void MOD_mkTb::RL_count()
{
  tUInt8 DEF_x__h159;
  DEF_cnt__h270 = INST_cnt.METH_read();
  DEF_x__h159 = (tUInt8)15u & (DEF_cnt__h270 + (tUInt8)1u);
  INST_cnt.METH_write(DEF_x__h159);
}

void MOD_mkTb::RL_print()
{
  tUInt8 DEF_c__h338;
  tUInt8 DEF_c__h317;
  tUInt8 DEF_c_out__h293;
  tUInt8 DEF_a__h315;
  tUInt8 DEF_s__h316;
  tUInt8 DEF_c_in__h173;
  tUInt8 DEF_b__h172;
  tUInt8 DEF_a__h171;
  DEF_cnt__h270 = INST_cnt.METH_read();
  DEF_a__h171 = (tUInt8)((tUInt8)1u & (DEF_cnt__h270 >> 2u));
  DEF_b__h172 = (tUInt8)((tUInt8)1u & (DEF_cnt__h270 >> 1u));
  DEF_c_in__h173 = (tUInt8)((tUInt8)1u & DEF_cnt__h270);
  DEF_a__h315 = DEF_a__h171 ^ DEF_b__h172;
  DEF_s__h316 = DEF_a__h315 ^ DEF_c_in__h173;
  DEF_c__h317 = DEF_a__h315 & DEF_c_in__h173;
  DEF_c__h338 = DEF_a__h171 & DEF_b__h172;
  DEF_c_out__h293 = DEF_c__h317 | DEF_c__h338;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,1,1,1,1,1",
		   &__str_literal_3,
		   DEF_a__h171,
		   DEF_b__h172,
		   DEF_c_in__h173,
		   DEF_c_out__h293,
		   DEF_s__h316);
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  }
}

void MOD_mkTb::RL_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 1u);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_started.reset_RST(ARG_rst_in);
  INST_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cnt.dump_state(indent + 2u);
  INST_started.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cnt__h270", 4u);
  num = INST_cnt.dump_VCD_defs(num);
  num = INST_started.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_cnt__h270) != DEF_cnt__h270)
      {
	vcd_write_val(sim_hdl, num, DEF_cnt__h270, 4u);
	backing.DEF_cnt__h270 = DEF_cnt__h270;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_cnt__h270, 4u);
      backing.DEF_cnt__h270 = DEF_cnt__h270;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_cnt.dump_VCD(dt, backing.INST_cnt);
  INST_started.dump_VCD(dt, backing.INST_started);
}
