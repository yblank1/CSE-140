/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Mon Apr 24 16:38:21 PDT 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbBCM.h"


/* String declarations */
static std::string const __str_literal_3("%b||%b", 6u);
static std::string const __str_literal_2("----------", 10u);
static std::string const __str_literal_1("abcde||s", 8u);


/* Constructor */
MOD_mkTbBCM::MOD_mkTbBCM(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cnt(simHdl, "cnt", this, 6u, (tUInt8)0u, (tUInt8)0u),
    INST_started(simHdl, "started", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbBCM::init_symbols_0()
{
  init_symbol(&symbols[0u], "cnt", SYM_MODULE, &INST_cnt);
  init_symbol(&symbols[1u], "cnt__h317", SYM_DEF, &DEF_cnt__h317, 6u);
  init_symbol(&symbols[2u], "RL_count", SYM_RULE);
  init_symbol(&symbols[3u], "RL_finish", SYM_RULE);
  init_symbol(&symbols[4u], "RL_print", SYM_RULE);
  init_symbol(&symbols[5u], "RL_start", SYM_RULE);
  init_symbol(&symbols[6u], "started", SYM_MODULE, &INST_started);
}


/* Rule actions */

void MOD_mkTbBCM::RL_start()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  }
  INST_started.METH_write((tUInt8)1u);
}

void MOD_mkTbBCM::RL_count()
{
  tUInt8 DEF_x__h159;
  DEF_cnt__h317 = INST_cnt.METH_read();
  DEF_x__h159 = (tUInt8)63u & (DEF_cnt__h317 + (tUInt8)1u);
  INST_cnt.METH_write(DEF_x__h159);
}

void MOD_mkTbBCM::RL_print()
{
  tUInt8 DEF_IF_cnt_BIT_0_2_THEN_4_ELSE_3___d14;
  tUInt8 DEF_IF_cnt_BIT_0_2_THEN_3_ELSE_2___d16;
  tUInt8 DEF_IF_cnt_BIT_0_2_THEN_2_ELSE_1___d19;
  tUInt8 DEF_IF_cnt_BIT_1_1_THEN_IF_cnt_BIT_0_2_THEN_4_ELSE_ETC___d17;
  tUInt8 DEF_IF_cnt_BIT_1_1_THEN_IF_cnt_BIT_0_2_THEN_3_ELSE_ETC___d20;
  tUInt8 DEF_IF_cnt_BIT_2_0_THEN_IF_cnt_BIT_1_1_THEN_IF_cnt_ETC___d21;
  tUInt8 DEF_out__h192;
  tUInt8 DEF_cnt_BIT_0___h411;
  tUInt8 DEF_cnt_BIT_1___h388;
  tUInt8 DEF_cnt_BIT_2___h365;
  tUInt8 DEF_cnt_BIT_3___h342;
  tUInt8 DEF_cnt_BIT_4___h319;
  tUInt8 DEF_cnt_BITS_4_TO_0___h239;
  DEF_cnt__h317 = INST_cnt.METH_read();
  DEF_cnt_BITS_4_TO_0___h239 = (tUInt8)((tUInt8)31u & DEF_cnt__h317);
  DEF_cnt_BIT_4___h319 = (tUInt8)((tUInt8)1u & (DEF_cnt__h317 >> 4u));
  DEF_cnt_BIT_3___h342 = (tUInt8)((tUInt8)1u & (DEF_cnt__h317 >> 3u));
  DEF_cnt_BIT_2___h365 = (tUInt8)((tUInt8)1u & (DEF_cnt__h317 >> 2u));
  DEF_cnt_BIT_1___h388 = (tUInt8)((tUInt8)1u & (DEF_cnt__h317 >> 1u));
  DEF_cnt_BIT_0___h411 = (tUInt8)((tUInt8)1u & DEF_cnt__h317);
  DEF_IF_cnt_BIT_0_2_THEN_2_ELSE_1___d19 = DEF_cnt_BIT_0___h411 ? (tUInt8)2u : (tUInt8)1u;
  DEF_IF_cnt_BIT_0_2_THEN_3_ELSE_2___d16 = DEF_cnt_BIT_0___h411 ? (tUInt8)3u : (tUInt8)2u;
  DEF_IF_cnt_BIT_1_1_THEN_IF_cnt_BIT_0_2_THEN_3_ELSE_ETC___d20 = DEF_cnt_BIT_1___h388 ? DEF_IF_cnt_BIT_0_2_THEN_3_ELSE_2___d16 : DEF_IF_cnt_BIT_0_2_THEN_2_ELSE_1___d19;
  DEF_IF_cnt_BIT_0_2_THEN_4_ELSE_3___d14 = DEF_cnt_BIT_0___h411 ? (tUInt8)4u : (tUInt8)3u;
  DEF_IF_cnt_BIT_1_1_THEN_IF_cnt_BIT_0_2_THEN_4_ELSE_ETC___d17 = DEF_cnt_BIT_1___h388 ? DEF_IF_cnt_BIT_0_2_THEN_4_ELSE_3___d14 : DEF_IF_cnt_BIT_0_2_THEN_3_ELSE_2___d16;
  DEF_IF_cnt_BIT_2_0_THEN_IF_cnt_BIT_1_1_THEN_IF_cnt_ETC___d21 = DEF_cnt_BIT_2___h365 ? DEF_IF_cnt_BIT_1_1_THEN_IF_cnt_BIT_0_2_THEN_4_ELSE_ETC___d17 : DEF_IF_cnt_BIT_1_1_THEN_IF_cnt_BIT_0_2_THEN_3_ELSE_ETC___d20;
  DEF_out__h192 = DEF_cnt_BIT_4___h319 ? (DEF_cnt_BIT_3___h342 ? (DEF_cnt_BIT_2___h365 ? (DEF_cnt_BIT_1___h388 ? (DEF_cnt_BIT_0___h411 ? (tUInt8)5u : (tUInt8)4u) : DEF_IF_cnt_BIT_0_2_THEN_4_ELSE_3___d14) : DEF_IF_cnt_BIT_1_1_THEN_IF_cnt_BIT_0_2_THEN_4_ELSE_ETC___d17) : DEF_IF_cnt_BIT_2_0_THEN_IF_cnt_BIT_1_1_THEN_IF_cnt_ETC___d21) : (DEF_cnt_BIT_3___h342 ? DEF_IF_cnt_BIT_2_0_THEN_IF_cnt_BIT_1_1_THEN_IF_cnt_ETC___d21 : (DEF_cnt_BIT_2___h365 ? DEF_IF_cnt_BIT_1_1_THEN_IF_cnt_BIT_0_2_THEN_3_ELSE_ETC___d20 : (DEF_cnt_BIT_1___h388 ? DEF_IF_cnt_BIT_0_2_THEN_2_ELSE_1___d19 : (DEF_cnt_BIT_0___h411 ? (tUInt8)1u : (tUInt8)0u))));
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,5,3", &__str_literal_3, DEF_cnt_BITS_4_TO_0___h239, DEF_out__h192);
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  }
}

void MOD_mkTbBCM::RL_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 1u);
}


/* Methods */


/* Reset routines */

void MOD_mkTbBCM::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_started.reset_RST(ARG_rst_in);
  INST_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbBCM::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbBCM::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cnt.dump_state(indent + 2u);
  INST_started.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbBCM::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cnt__h317", 6u);
  num = INST_cnt.dump_VCD_defs(num);
  num = INST_started.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbBCM::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbBCM &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbBCM::vcd_defs(tVCDDumpType dt, MOD_mkTbBCM &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 6u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_cnt__h317) != DEF_cnt__h317)
      {
	vcd_write_val(sim_hdl, num, DEF_cnt__h317, 6u);
	backing.DEF_cnt__h317 = DEF_cnt__h317;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_cnt__h317, 6u);
      backing.DEF_cnt__h317 = DEF_cnt__h317;
    }
}

void MOD_mkTbBCM::vcd_prims(tVCDDumpType dt, MOD_mkTbBCM &backing)
{
  INST_cnt.dump_VCD(dt, backing.INST_cnt);
  INST_started.dump_VCD(dt, backing.INST_started);
}
